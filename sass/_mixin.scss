@function determine-text-color($color) {
	@if (lightness($color) > 80) {
		@return #757575; // Lighter backgorund, return dark color
	} @else {
		@return #ffffff; // Darker background, return light color
	}
}


@mixin materialIcon($icon){
	content:$icon;
	font-family: 'Material Icons';
	font-weight: normal;
	font-style: normal;
	display: inline-block;
	line-height: 1;
	text-transform: none;
	letter-spacing: normal;
	word-wrap: normal;
	white-space: nowrap;
	direction: ltr;

	/* Support for all WebKit browsers. */
	-webkit-font-smoothing: antialiased;
	/* Support for Safari and Chrome. */
	text-rendering: optimizeLegibility;

	/* Support for Firefox. */
	-moz-osx-font-smoothing: grayscale;

	/* Support for IE. */
	font-feature-settings: 'liga';
}


$dna-scroller-track-color-inactive: #eeeeee;
$dna-scroller-track-color-active: #e0e0e0;
$dna-scroller-thumb-color-inactive: #9e9e9e;
$dna-scroller-thumb-color-active: $color-primary;
$dna-scroller-size: 8px;
$dna-scroller-curve: 8px;

@mixin applyScrollBar(
	$scrollbar-track-bg: $dna-scroller-track-color-inactive ,
	$scrollbar-thumb-bg: $dna-scroller-thumb-color-inactive ,
	$scrollbar-track-bg-active: $dna-scroller-track-color-active ,
	$scrollbar-thumb-bg-active: $dna-scroller-thumb-color-active ,
	$scrollbar-curve: $dna-scroller-curve ,
	$scrollbar-size: $dna-scroller-size ) {

	width: 100%;
	overflow-y: auto;
	overflow-x: hidden;
	position: relative;

	&::-webkit-scrollbar {
		width: $scrollbar-size;
		height: $scrollbar-size;
		background-color: inherit;
	}

	&::-webkit-scrollbar-track {
		background-color: $scrollbar-track-bg;
		border-radius: $scrollbar-curve;
	}

	&::-webkit-scrollbar-thumb {
		background-color: $scrollbar-thumb-bg;
		border-radius: 4em;
	}
	&:hover {
		&::-webkit-scrollbar-track {
			background-color: $scrollbar-track-bg-active;
		}

		&::-webkit-scrollbar-thumb {
			background-color: $scrollbar-thumb-bg-active;
		}
	}
}

@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

@function set-color($color, $offset: 0) {

	$v: ($offset / 100);

	@if (lightness($color) >= 0 and lightness($color) <= 24)
	{
		@return rgba(255,255,255,(1 - $v));
	}
	@else if (lightness($color) >= 25 and lightness($color) <= 49)
	{
		@return rgba(255,255,255,(0.65 - $v));
	}
	@else if (lightness($color) >= 50 and lightness($color) <= 74)
	{
		@return rgba(0,0,0,(0.65 - $v));
	}
	@else if (lightness($color) >= 75)
	{
		@return rgba(0,0,0,(0.95 - $v));
	}
}

@mixin flex($hAlign: flex-start, $vAlign: flex-start, $impt: '') {
	display: flex #{$impt};
	justify-content: $hAlign #{$impt};
	align-items: $vAlign #{$impt};
}


@mixin ellipsis($maxWidth: 250px) {
	width: 100%;
	max-width: $maxWidth;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin psuedobox($width: 1.2rem, $height: 1.2rem, $content: '') {
	display: block;
	content: $content;
	width: $width;
	height: $height;
}


$spaceAdjust_count: 20;
$spaceAdjust_multiplier: 5;
@for $i from 1 through $spaceAdjust_count {
	$name: $i;
	$value: $i * $spaceAdjust_multiplier;

	// padding
	.padTop--#{$name} {
		padding-top: #{$value}px !important;
	}
	.padRight--#{$name} {
		padding-right: #{$value}px !important;
	}
	.padBottom--#{$name} {
		padding-bottom: #{$value}px !important;
	}
	.padLeft--#{$name} {
		padding-left: #{$value}px !important;
	}

	// margin
	.marTop--#{$name} {
		margin-top: #{$value}px !important;
	}
	.marRight--#{$name} {
		margin-right: #{$value}px !important;
	}
	.marBottom--#{$name} {
		margin-bottom: #{$value}px !important;
	}
	.marLeft--#{$name} {
		margin-left: #{$value}px !important;
	}
}
.noGutter {
	padding: 0 !important;
	margin: 0 !important;
}

@mixin buttonSize($width: auto, $height: auto, $padding: 0.2rem 0.5rem, $flexX: flex-start, $flexY: center, $borderRadius: 0) {
	@include makeGrid($flexX, $flexY);
	width: $width;
	height: $height;
	min-width: auto;
	min-height: auto;
	max-width: none;
	max-height: none;
	padding: $padding;
	border-radius: $borderRadius;
}

@mixin iconSize($size: 2rem) {
	@include makeGrid(center, center);
	width: calc(#{$size} + 0.2rem);
	height: calc(#{$size} + 0.2rem);
	min-width: auto;
	min-height: auto;

	font-size: $size;
	line-height: 1;

	&:before {
		@include makeGrid(center, center);
		width: calc(#{$size} + 0.2rem);
		height: calc(#{$size} + 0.2rem);
		min-width: auto;
		min-height: auto;

		font-size: $size;
		line-height: 1;
	}
}

@mixin fontSize($size: 1rem) {
	font-size: $size;
	line-height: calc(#{$size} + 0.6rem);
}

@function getColor($map, $color){
	@each $property, $value in $map {
		@if ($property == $color) {
			@return $value;
		}
	}
}